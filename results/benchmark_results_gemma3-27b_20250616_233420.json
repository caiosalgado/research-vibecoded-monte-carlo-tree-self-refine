{
  "timestamp": "2025-06-16T23:37:23.144371",
  "model": "ollama:gemma3:27b",
  "total_problems": 9,
  "benchmark_results": [
    {
      "problem_id": "isPalindrome",
      "problem_title": "Palindrome Number",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    \n    original_num = x\n    reversed_num = 0\n    \n    while x > 0:\n        digit = x % 10\n        reversed_num = reversed_num * 10 + digit\n        x //= 10\n        \n    return original_num == reversed_num",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    \n    original_x = x\n    reversed_x = 0\n    \n    while x > 0:\n        digit = x % 10\n        reversed_x = reversed_x * 10 + digit\n        x //= 10\n        \n    return original_x == reversed_x",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    \n    original_x = x\n    reversed_x = 0\n    \n    while x > 0:\n        digit = x % 10\n        reversed_x = reversed_x * 10 + digit\n        x //= 10\n        \n    return original_x == reversed_x",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "romanToInt",
      "problem_title": "Roman to Integer",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        curr_value = roman_map[s[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        curr_value = roman_map[s[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        curr_value = roman_map[s[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "twoSum",
      "problem_title": "Two Sum",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "addTwoNumbers",
      "problem_title": "Add Two Numbers",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n\n    while l1 or l2 or carry:\n        sum_val = carry\n        if l1:\n            sum_val += l1.val\n            l1 = l1.next\n        if l2:\n            sum_val += l2.val\n            l2 = l2.next\n\n        carry = sum_val // 10\n        digit = sum_val % 10\n\n        current.next = ListNode(digit)\n        current = current.next\n\n    return dummy.next",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n\n    while l1 or l2 or carry:\n        sum_val = carry\n        if l1:\n            sum_val += l1.val\n            l1 = l1.next\n        if l2:\n            sum_val += l2.val\n            l2 = l2.next\n\n        carry = sum_val // 10\n        digit = sum_val % 10\n\n        current.next = ListNode(digit)\n        current = current.next\n\n    return dummy.next",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n\n    while l1 or l2 or carry:\n        val1 = l1.val if l1 else 0\n        val2 = l2.val if l2 else 0\n\n        sum_val = val1 + val2 + carry\n        carry = sum_val // 10\n        digit = sum_val % 10\n\n        current.next = ListNode(digit)\n        current = current.next\n\n        l1 = l1.next if l1 else None\n        l2 = l2.next if l2 else None\n\n    return dummy.next",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "longestPalindrome",
      "problem_title": "Longest Palindromic Substring",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if not s:\n        return \"\"\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_len = 1\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            start = i\n            max_len = 2\n\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if k > max_len:\n                    start = i\n                    max_len = k\n\n    return s[start:start + max_len]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if not s:\n        return \"\"\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_len = 1\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            start = i\n            max_len = 2\n\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if k > max_len:\n                    start = i\n                    max_len = k\n\n    return s[start:start + max_len]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if not s:\n        return \"\"\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_len = 1\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            start = i\n            max_len = 2\n\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if k > max_len:\n                    start = i\n                    max_len = k\n\n    return s[start:start + max_len]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "maxArea",
      "problem_title": "Container With Most Water",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left = 0\n    right = len(height) - 1\n    max_area = 0\n\n    while left < right:\n        width = right - left\n        min_height = min(height[left], height[right])\n        area = width * min_height\n        max_area = max(max_area, area)\n\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left = 0\n    right = len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        width = right - left\n        current_area = min(height[left], height[right]) * width\n        max_area = max(max_area, current_area)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n            \n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    max_area = 0\n    left, right = 0, len(height) - 1\n    while left < right:\n        width = right - left\n        min_height = min(height[left], height[right])\n        area = width * min_height\n        max_area = max(max_area, area)\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "mergeKLists",
      "problem_title": "Merge k Sorted Lists",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import heapq\n    heap = []\n    for i, head in enumerate(lists):\n        if head:\n            heapq.heappush(heap, (head.val, i, head))\n    \n    dummy = ListNode()\n    curr = dummy\n    \n    while heap:\n        val, index, node = heapq.heappop(heap)\n        curr.next = node\n        curr = curr.next\n        if node.next:\n            heapq.heappush(heap, (node.next.val, index, node.next))\n            \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import heapq\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst.val, i, lst))\n    \n    dummy = ListNode()\n    curr = dummy\n    \n    while heap:\n        val, index, node = heapq.heappop(heap)\n        curr.next = node\n        curr = curr.next\n        \n        if node.next:\n            heapq.heappush(heap, (node.next.val, index, node.next))\n            \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import heapq\n    heap = []\n    for i, head in enumerate(lists):\n        if head:\n            heapq.heappush(heap, (head.val, i, head))\n    \n    dummy = ListNode()\n    curr = dummy\n    \n    while heap:\n        val, index, node = heapq.heappop(heap)\n        curr.next = node\n        curr = curr.next\n        \n        if node.next:\n            heapq.heappush(heap, (node.next.val, index, node.next))\n            \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.0,
        "total_errors": 9,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "findMedianSortedArrays",
      "problem_title": "Median of Two Sorted Arrays",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged_array = sorted(nums1 + nums2)\n    total_length = len(merged_array)\n\n    if total_length % 2 == 0:\n        # Even length, take the average of the middle two elements\n        mid1 = merged_array[total_length // 2 - 1]\n        mid2 = merged_array[total_length // 2]\n        return (mid1 + mid2) / 2.0\n    else:\n        # Odd length, take the middle element\n        return float(merged_array[total_length // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged_array = sorted(nums1 + nums2)\n    total_length = len(merged_array)\n\n    if total_length % 2 == 0:\n        # Even length, take the average of the middle two elements\n        mid1 = merged_array[total_length // 2 - 1]\n        mid2 = merged_array[total_length // 2]\n        return (mid1 + mid2) / 2.0\n    else:\n        # Odd length, return the middle element\n        return float(merged_array[total_length // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged_array = sorted(nums1 + nums2)\n    total_length = len(merged_array)\n    \n    if total_length % 2 == 0:\n        # Even length, take the average of the middle two elements\n        mid1 = merged_array[total_length // 2 - 1]\n        mid2 = merged_array[total_length // 2]\n        return (mid1 + mid2) / 2.0\n    else:\n        # Odd length, take the middle element\n        return float(merged_array[total_length // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "isMatch",
      "problem_title": "Regular Expression Matching",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:\n                    dp[i][j] = dp[i][j] or dp[i - 1][j]\n            else:\n                dp[i][j] = False\n\n    return dp[m][n]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:\n                    dp[i][j] = dp[i][j] or dp[i - 1][j]\n            else:\n                dp[i][j] = False\n\n    return dp[m][n]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:\n                    dp[i][j] = dp[i][j] or dp[i - 1][j]\n            else:\n                dp[i][j] = False\n\n    return dp[m][n]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    }
  ]
}