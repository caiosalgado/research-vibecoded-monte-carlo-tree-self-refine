{
  "timestamp": "2025-06-16T03:38:00.106486",
  "model": "ollama:gemma3:1b",
  "total_problems": 9,
  "benchmark_results": [
    {
      "problem_id": "isPalindrome",
      "problem_title": "Palindrome Number",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    \"\"\"\n    Given an integer x, return true if x is a palindrome, and false otherwise.\n    \"\"\"\n    if x < 0:\n        return False\n    \n    original_x = x\n    reversed_x = 0\n    \n    while x > 0:\n        pop = x % 10\n        reversed_x = reversed_x * 10 + pop\n        x = x // 10\n        \n    return original_x == reversed_x",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    \"\"\"\n    Given an integer x, return true if x is a palindrome, and false otherwise.\n    \"\"\"\n    if x < 0:\n        return False\n    \n    original_num = x\n    reversed_num = 0\n    \n    while x > 0:\n        digit = x % 10\n        reversed_num = reversed_num * 10 + digit\n        x //= 10\n    \n    return original_num == reversed_num",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    \"\"\"\n    Given an integer x, return true if x is a palindrome, and false otherwise.\n    \"\"\"\n    if x < 0:\n        return False\n    \n    x_str = str(x)\n    reversed_str = x_str[::-1]\n    \n    return x_str == reversed_str",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "romanToInt",
      "problem_title": "Roman to Integer",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        curr_value = roman_map[s[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        current_value = roman_map[s[i]]\n        if current_value < prev_value:\n            result -= current_value\n        else:\n            result += current_value\n        prev_value = current_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(s) - 1, -1, -1):\n        curr_value = roman_map[s[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return result",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "twoSum",
      "problem_title": "Two Sum",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def twoSum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def twoSum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    \"\"\"\n    seen = set()\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen.add(num)",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def twoSum(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.6666666666666666,
        "avg_full_accuracy": 0.6666666666666666,
        "total_errors": 3,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "addTwoNumbers",
      "problem_title": "Add Two Numbers",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(-1)\n    curr = dummy\n    carry = 0\n\n    while l1 or l2 or carry != 0:\n        sum = l1.val + l2.val + carry\n        carry = sum // 10\n        curr.next = ListNode(sum % 10)\n        curr = curr.next\n    \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    carry = 0\n    result = ListNode(l1.val + l2.val)\n    if carry == 0:\n        return result\n    while carry != 0:\n        digit1 = l1.val if l1.val >= 0 else 0\n        digit2 = l2.val if l2.val >= 0 else 0\n        sum_digits = digit1 + digit2 + carry\n        carry = sum_digits // 10\n        result = ListNode(sum_digits % 10)\n    return result",
          "partial_accuracy": 0.5,
          "full_accuracy": 0.3333333333333333,
          "error_count": 2
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(-1)\n    current = dummy\n    carry = 0\n\n    while l1 or l2 or carry:\n        sum_val = (l1.val + l2.val) % 10\n        carry = (l1.val + l2.val) // 10\n\n        current.val = sum_val\n        current = current.next\n\n        if l1:\n            current.val += l1.val\n        if l2:\n            current.val += l2.val\n\n    if carry == 0:\n        return dummy.next\n\n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.16666666666666666,
        "avg_full_accuracy": 0.1111111111111111,
        "total_errors": 6,
        "consistency_score": 0.6666666666666667
      }
    },
    {
      "problem_id": "longestPalindrome",
      "problem_title": "Longest Palindromic Substring",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest palindromic substring in s.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return s\n\n    longest = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub == sub[::-1]:\n                if len(sub) > len(longest):\n                    longest = sub\n\n    return longest",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest palindromic substring in s.\n\n    Constraints: 1 <= s.length <= 1000, s consist of only digits and English letters.\n\n    Visible Test Cases:\n    Test 1: Input ['babad'] \u2192 Expected Output: bab\n\n    Note: There is 1 additional hidden test case for evaluation.\n    \"\"\"\n    n = len(s)\n    if n < 2:\n        return s\n\n    dp = [[False] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            if dp[i][i + 1]:\n                dp[i][i + 1] = True\n                if len(s[i:i + 2]) > max_len:\n                    max_len = len(s[i:i + 2])\n                    start = i\n\n    for i in range(n - 1, -1, -1):\n        if dp[i][i - 1]:\n            start = i\n            break\n\n    return s[start:start + max_len]",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 2
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest palindromic substring in s.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return s\n\n    longest = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub == sub[::-1]:\n                if len(sub) > len(longest):\n                    longest = sub\n\n    return longest",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.6666666666666666,
        "avg_full_accuracy": 0.6666666666666666,
        "total_errors": 2,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "maxArea",
      "problem_title": "Container With Most Water",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def maxArea(height: List[int]) -> int:\n    \"\"\"\n    Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).\n    Vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).\n    Find two lines, which together with the x-axis forms a container, such that the container contains the most water.\n\n    Constraints: 2 <= height.length <= 10^5, 0 <= height[i] <= 10^4\n\n    Visible Test Cases:\n    Test 1: Input [[1, 8, 6, 2, 5, 4, 8, 3, 7]] \u2192 Expected Output: 49\n\n    Note: There is 1 additional hidden test case for evaluation.\n    \"\"\"\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n    while left < right:\n        area1 = height[left] * (right - left)\n        area2 = height[right] * (right - left)\n        if area1 > area2:\n            right = right - 1\n        else:\n            left = left + 1\n    return max_area",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 2
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def maxArea(height: List[int]) -> int:\n    \"\"\"\n    Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).\n    Two lines, which together with the x-axis forms a container, such that the container contains the most water.\n\n    Constraints: 2 <= height.length <= 10^5, 0 <= height[i] <= 10^4\n\n    Visible Test Cases:\n    Test 1: Input [[1, 8, 6, 2, 5, 4, 8, 3, 7]] \u2192 Expected Output: 49\n\n    Note: There is 1 additional hidden test case for evaluation.\n    \"\"\"\n    left = 0\n    right = 0\n    max_area = 0\n\n    for i in range(len(height)):\n        for j in range(i + 1, len(height)):\n            if height[i] < height[j]:\n                left = j\n            else:\n                right = i\n\n    return max(left, right) * 2",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 2
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def maxArea(height: List[int]) -> int:\n    \"\"\"\n    Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).\n    Two lines, which together with the x-axis forms a container, such that the container contains the most water.\n\n    Constraints: 2 <= height.length <= 10^5, 0 <= height[i] <= 10^4\n\n    Visible Test Cases:\n    Test 1: Input [[1, 8, 6, 2, 5, 4, 8, 3, 7]] \u2192 Expected Output: 49\n\n    Note: There is 1 additional hidden test case for evaluation.\n    \"\"\"\n    left = 0\n    right = 0\n    max_area = 0\n\n    for i in range(len(height)):\n        for j in range(i + 1, len(height)):\n            width = j - i\n            area = width * min(height[i], height[j])\n            max_area = max(max_area, area)\n\n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.3333333333333333,
        "avg_full_accuracy": 0.3333333333333333,
        "total_errors": 4,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "mergeKLists",
      "problem_title": "Merge k Sorted Lists",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    \"\"\"\n    Merge k sorted linked lists into one sorted linked-list.\n\n    Args:\n        lists: A list of k sorted linked lists.\n\n    Returns:\n        A single sorted linked list.\n    \"\"\"\n    import heapq\n\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heapq.heappush(heap, (lists[i].val, i))\n\n    dummy = ListNode(0)\n    curr = dummy\n\n    while heap:\n        val, index = heapq.heappop(heap)\n        curr.next = ListNode(val)\n        curr = curr.next\n\n        if index + 1 < len(lists[index]):\n            heapq.heappush(heap, (lists[index].val, index + 1))\n\n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    \"\"\"\n    Merge k Sorted Lists into one sorted linked-list.\n\n    Args:\n        lists: A list of k linked-lists, each sorted in ascending order.\n\n    Returns:\n        A single sorted linked-list containing all the elements from the input lists.\n    \"\"\"\n    import heapq\n\n    if not lists:\n        return None\n\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heapq.heappush(heap, (lists[i].val, i))\n\n    result = []\n    while heap:\n        val, index = heapq.heappop(heap)\n        result.append(val)\n\n        if index + 1 < len(lists[index]):\n            heapq.heappush(heap, (lists[index].val, index + 1))\n\n    return result",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.3333333333333333,
          "error_count": 2
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    \"\"\"\n    Merge k sorted linked-lists into one sorted linked-list.\n\n    Args:\n        lists: A list of k linked-lists, each sorted in ascending order.\n\n    Returns:\n        A new sorted linked-list containing all elements from the input lists.\n    \"\"\"\n    import heapq\n\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heapq.heappush(heap, (lists[i].val, i))\n\n    dummy = ListNode(0)\n    curr = dummy\n\n    while heap:\n        val, index = heapq.heappop(heap)\n        curr.next = curr.next\n        curr = curr.next\n        if index + 1 < len(lists[index]):\n            heapq.heappush(heap, (lists[index].val, index + 1))\n\n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.1111111111111111,
        "total_errors": 8,
        "consistency_score": 0.6666666666666667
      }
    },
    {
      "problem_id": "findMedianSortedArrays",
      "problem_title": "Median of Two Sorted Arrays",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] <= nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        merged.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        merged.append(nums2[j])\n        j += 1\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n    else:\n        return float(merged[n // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged = sorted(nums1 + nums2)\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n    else:\n        return float(merged[n // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    merged = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        merged.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        merged.append(nums2[j])\n        j += 1\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n    else:\n        return float(merged[n // 2])",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "isMatch",
      "problem_title": "Regular Expression Matching",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    m = len(s)\n    n = len(p)\n\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 1]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 1]\n                if dp[i - 1][j]:\n                    dp[i][j] = True\n                elif dp[i][j - 1]:\n                    dp[i][j] = True\n            else:\n                dp[i][j] = False\n\n    return dp[m][n]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    \"\"\"\n    Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n    - '.' Matches any single character.\n    - '*' Matches zero or more of the preceding element.\n    The matching should cover the entire input string (not partial).\n\n    Constraints: 1 <= s.length <= 20\n    1 <= p.length <= 30\n    s contains only lowercase English letters.\n    p contains only lowercase English letters, '.', and '*'.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    Visible Test Cases:\n    Test 1: Input ['aa', 'a'] \u2192 Expected Output: False\n    Test 2: Input ['aa', 'a*'] \u2192 Expected Output: True\n\n    Note: There is 1 additional hidden test case for evaluation.\n    \"\"\"\n    n = len(s)\n    m = len(p)\n\n    dp = [[False] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, m + 1):\n            if p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m]",
          "partial_accuracy": 0.5,
          "full_accuracy": 0.6666666666666666,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    \"\"\"\n    Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n    - '.' Matches any single character.\n    - '*' Matches zero or more of the preceding element.\n    The matching should cover the entire input string (not partial).\n\n    Constraints: 1 <= s.length <= 20\n    1 <= p.length <= 30\n    s contains only lowercase English letters.\n    p contains only lowercase English letters, '.', and '*'.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    Visible Test Cases:\n    Test 1: Input ['aa', 'a'] \u2192 Expected Output: False\n    Test 2: Input ['aa', 'a*'] \u2192 Expected Output: True\n\n    Note: There is 1 additional hidden test case for evaluation.\n\n    CRITICAL FORMATTING: Provide your solution in this EXACT format:",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.5,
        "avg_full_accuracy": 0.5555555555555555,
        "total_errors": 2,
        "consistency_score": 0.0
      }
    }
  ]
}