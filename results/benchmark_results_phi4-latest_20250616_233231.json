{
  "timestamp": "2025-06-16T23:34:20.985246",
  "model": "ollama:phi4:latest",
  "total_problems": 9,
  "benchmark_results": [
    {
      "problem_id": "isPalindrome",
      "problem_title": "Palindrome Number",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0 or (x % 10 == 0 and x != 0):\n        return False\n    \n    reverted_number = 0\n    while x > reverted_number:\n        reverted_number = reverted_number * 10 + x % 10\n        x //= 10\n\n    return x == reverted_number or x == reverted_number // 10",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0 or (x % 10 == 0 and x != 0):\n        return False\n    \n    reverted_number = 0\n    while x > reverted_number:\n        reverted_number = reverted_number * 10 + x % 10\n        x //= 10\n    \n    return x == reverted_number or x == reverted_number // 10",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0 or (x % 10 == 0 and x != 0):\n        return False\n    reversed_half = 0\n    while x > reversed_half:\n        reversed_half = reversed_half * 10 + x % 10\n        x //= 10\n    return x == reversed_half or x == reversed_half // 10",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "romanToInt",
      "problem_title": "Roman to Integer",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_to_int = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    \n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        value = roman_to_int[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    \n    return total",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_to_int = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    \n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = roman_to_int[char]\n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        prev_value = current_value\n        \n    return total",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_to_int = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = roman_to_int[char]\n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        prev_value = current_value\n\n    return total",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "twoSum",
      "problem_title": "Two Sum",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    seen = {}\n    for index, value in enumerate(nums):\n        pair_value = target - value\n        if pair_value in seen:\n            return [seen[pair_value], index]\n        seen[value] = index",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_to_index = {}\n    for index, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], index]\n        num_to_index[num] = index",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "addTwoNumbers",
      "problem_title": "Add Two Numbers",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy_head = ListNode(0)\n    current = dummy_head\n    carry = 0\n    \n    while l1 is not None or l2 is not None:\n        x = l1.val if l1 is not None else 0\n        y = l2.val if l2 is not None else 0\n        \n        total = carry + x + y\n        carry = total // 10\n        current.next = ListNode(total % 10)\n        current = current.next\n        \n        if l1 is not None:\n            l1 = l1.next\n        if l2 is not None:\n            l2 = l2.next\n    \n    if carry > 0:\n        current.next = ListNode(carry)\n    \n    return dummy_head.next",
          "partial_accuracy": 0.5,
          "full_accuracy": 0.3333333333333333,
          "error_count": 2
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy_head = ListNode(0)\n    current = dummy_head\n    carry = 0\n\n    while l1 or l2 or carry:\n        val1 = l1.val if l1 else 0\n        val2 = l2.val if l2 else 0\n        \n        total = val1 + val2 + carry\n        carry = total // 10\n        current.next = ListNode(total % 10)\n        \n        current = current.next\n        \n        if l1:\n            l1 = l1.next\n        if l2:\n            l2 = l2.next\n\n    return dummy_head.next",
          "partial_accuracy": 0.5,
          "full_accuracy": 0.3333333333333333,
          "error_count": 2
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    dummy_head = ListNode(0)\n    current = dummy_head\n    carry = 0\n    \n    while l1 is not None or l2 is not None or carry != 0:\n        val1 = l1.val if l1 is not None else 0\n        val2 = l2.val if l2 is not None else 0\n        \n        total = val1 + val2 + carry\n        carry = total // 10\n        current.next = ListNode(total % 10)\n        \n        current = current.next\n        \n        if l1 is not None:\n            l1 = l1.next\n        if l2 is not None:\n            l2 = l2.next\n    \n    return dummy_head.next",
          "partial_accuracy": 0.5,
          "full_accuracy": 0.3333333333333333,
          "error_count": 2
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.5,
        "avg_full_accuracy": 0.3333333333333333,
        "total_errors": 6,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "longestPalindrome",
      "problem_title": "Longest Palindromic Substring",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    def expand_around_center(left: int, right: int) -> str:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    if not s or len(s) == 1:\n        return s\n    \n    longest = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        odd_palindrome = expand_around_center(i, i)\n        if len(odd_palindrome) > len(longest):\n            longest = odd_palindrome\n        \n        # Even length palindromes\n        even_palindrome = expand_around_center(i, i + 1)\n        if len(even_palindrome) > len(longest):\n            longest = even_palindrome\n    \n    return longest",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    def expand_around_center(left: int, right: int) -> str:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    if not s or len(s) == 1:\n        return s\n\n    longest = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        odd_palindrome = expand_around_center(i, i)\n        if len(odd_palindrome) > len(longest):\n            longest = odd_palindrome\n        \n        # Even length palindromes\n        even_palindrome = expand_around_center(i, i + 1)\n        if len(even_palindrome) > len(longest):\n            longest = even_palindrome\n\n    return longest",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if len(s) < 2 or s == s[::-1]:\n        return s\n\n    def expand_around_center(left: int, right: int) -> str:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        odd_palindrome = expand_around_center(i, i)\n        if len(odd_palindrome) > len(longest):\n            longest = odd_palindrome\n        \n        # Even length palindromes\n        even_palindrome = expand_around_center(i, i + 1)\n        if len(even_palindrome) > len(longest):\n            longest = even_palindrome\n\n    return longest",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "maxArea",
      "problem_title": "Container With Most Water",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        width = right - left\n        current_height = min(height[left], height[right])\n        current_area = width * current_height\n        \n        if current_area > max_area:\n            max_area = current_area\n            \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    l, r = 0, len(height) - 1\n    ans = 0\n    while l < r:\n        area = min(height[l], height[r]) * (r - l)\n        ans = max(ans, area)\n        if height[l] < height[r]:\n            l += 1\n        else:\n            r -= 1\n    return ans",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left, right = 0, len(height) - 1\n    max_water = 0\n    \n    while left < right:\n        width = right - left\n        current_height = min(height[left], height[right])\n        current_area = width * current_height\n        max_water = max(max_water, current_area)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_water",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "mergeKLists",
      "problem_title": "Merge k Sorted Lists",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List, Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import heapq\n\n    class Wrapper:\n        def __init__(self, node):\n            self.node = node\n        \n        # Define comparison operators for the priority queue\n        def __lt__(self, other):\n            return self.node.val < other.node.val\n    \n    min_heap = []\n    \n    # Initialize the heap with the head of each list\n    for l in lists:\n        if l:\n            heapq.heappush(min_heap, Wrapper(l))\n    \n    dummy = ListNode(0)\n    current = dummy\n    \n    while min_heap:\n        # Get the node with the smallest value from the heap\n        smallest_node_wrapper = heapq.heappop(min_heap)\n        smallest_node = smallest_node_wrapper.node\n        \n        # Add the smallest node to the merged list\n        current.next = smallest_node\n        current = current.next\n        \n        # If there is a next node in the list, add it to the heap\n        if smallest_node.next:\n            heapq.heappush(min_heap, Wrapper(smallest_node.next))\n    \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List, Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import heapq\n    \n    class Wrapper:\n        # Comparator for the priority queue\n        def __init__(self, node):\n            self.node = node\n        \n        def __lt__(self, other):\n            return self.node.val < other.node.val\n\n    min_heap = []\n    \n    # Initialize the heap with the head of each list\n    for l in lists:\n        if l:\n            heapq.heappush(min_heap, Wrapper(l))\n    \n    dummy = ListNode()\n    current = dummy\n    \n    while min_heap:\n        smallest_node_wrapper = heapq.heappop(min_heap)\n        smallest_node = smallest_node_wrapper.node\n        \n        # Add the smallest node to our new list\n        current.next = smallest_node\n        current = current.next\n        \n        if smallest_node.next:\n            heapq.heappush(min_heap, Wrapper(smallest_node.next))\n    \n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List, Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nimport heapq\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    class Wrapper:\n        def __init__(self, node):\n            self.node = node\n        \n        def __lt__(self, other):\n            return self.node.val < other.node.val\n    \n    min_heap = []\n    \n    # Initialize the heap with the first node of each list\n    for l in lists:\n        if l:\n            heapq.heappush(min_heap, Wrapper(l))\n    \n    dummy_head = ListNode(0)\n    current = dummy_head\n    \n    while min_heap:\n        smallest_node_wrapper = heapq.heappop(min_heap)\n        smallest_node = smallest_node_wrapper.node\n        \n        # Add the smallest node to the merged list\n        current.next = smallest_node\n        current = current.next\n        \n        # If there is a next node in the same list, add it to the heap\n        if smallest_node.next:\n            heapq.heappush(min_heap, Wrapper(smallest_node.next))\n    \n    return dummy_head.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.0,
        "total_errors": 9,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "findMedianSortedArrays",
      "problem_title": "Median of Two Sorted Arrays",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    A = nums1\n    B = nums2\n    \n    if len(A) > len(B):\n        return findMedianSortedArrays(B, A)\n    \n    m = len(A)\n    n = len(B)\n\n    min_index = 0\n    max_index = m\n\n    while min_index <= max_index:\n        partitionA = (min_index + max_index)//2\n        partitionB = ((m+n+1) // 2) - partitionA\n        \n        maxLeftA = float('-inf') if partitionA == 0 else A[partitionA-1]\n        minRightA = float('inf') if partitionA == m else A[partitionA]\n\n        maxLeftB = float('-inf') if partitionB == 0 else B[partitionB-1]\n        minRightB = float('inf') if partitionB == n else B[partitionB]\n\n        if maxLeftA <= minRightB and maxLeftB <= minRightA:\n            if (m+n) % 2 == 0:\n                return (max(maxLeftA, maxLeftB) + min(minRightA, minRightB)) / 2\n            else:\n                return max(maxLeftA, maxLeftB)\n        elif maxLeftA > minRightB:\n            max_index = partitionA - 1\n        else:\n            min_index = partitionA + 1\n\n    raise ValueError(\"Input arrays are not sorted\")",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    def findKthElement(left, right):\n        if left >= len(nums1) or left > k:\n            return nums2[k - left]\n        if right >= len(nums2) or k <= left:\n            return nums1[k]\n\n        midA = (left + len(nums1)) // 2\n        midB = k - midA\n\n        if nums1[midA] < nums2[midB]:\n            return findKthElement(midA + 1, right)\n        else:\n            return findKthElement(left, midB)\n\n    n, m = len(nums1), len(nums2)\n    if (n + m) % 2 == 0:\n        left_median = findKthElement(0, 0, (n + m) // 2)\n        right_median = findKthElement(0, 0, (n + m) // 2 + 1)\n        return (left_median + right_median) / 2\n    else:\n        return findKthElement(0, 0, (n + m + 1) // 2)\n\ndef findKthElement(left, right, k):\n    if left >= len(nums1) or left > k:\n        return nums2[k - left]\n    if right >= len(nums2) or k <= left:\n        return nums1[k]\n\n    midA = (left + len(nums1)) // 2\n    midB = k - midA\n\n    if nums1[midA] < nums2[midB]:\n        return findKthElement(midA + 1, right, k)\n    else:\n        return findKthElement(left, midB, k)\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    n, m = len(nums1), len(nums2)\n    if (n + m) % 2 == 0:\n        left_median = findKthElement(0, 0, (n + m) // 2)\n        right_median = findKthElement(0, 0, (n + m) // 2 + 1)\n        return (left_median + right_median) / 2\n    else:\n        return findKthElement(0, 0, (n + m + 1) // 2)\n\nnums1 = [1, 3]\nnums2 = [2]\n\nprint(findMedianSortedArrays(nums1, nums2)) # Expected output: 2.0",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    def median(arr):\n        n = len(arr)\n        if n % 2 == 0:\n            return (arr[n // 2 - 1] + arr[n // 2]) / 2\n        else:\n            return arr[n // 2]\n\n    merged = sorted(nums1 + nums2)\n    return median(merged)",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.6666666666666666,
        "avg_full_accuracy": 0.6666666666666666,
        "total_errors": 1,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "isMatch",
      "problem_title": "Regular Expression Matching",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    def dp(i, j):\n        if j == len(p):\n            return i == len(s)\n        \n        first_match = i < len(s) and (p[j] == s[i] or p[j] == '.')\n        \n        if j + 1 < len(p) and p[j + 1] == '*':\n            return (dp(i, j + 2) or\n                    first_match and dp(i + 1, j))\n        else:\n            return first_match and dp(i + 1, j + 1)\n    \n    return dp(0, 0)",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    \n    dp[0][0] = True\n    \n    for j in range(2, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n            \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == p[j - 1] or p[j - 1] == '.':\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if s[i - 1] == p[j - 2] or p[j - 2] == '.':\n                    dp[i][j] |= dp[i - 1][j]\n\n    return dp[m][n]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isMatch(s: str, p: str) -> bool:\n    memo = {}\n    \n    def dp(i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        \n        if j == len(p):\n            ans = i == len(s)\n        else:\n            first_match = i < len(s) and p[j] in {s[i], '.'}\n            \n            if j + 1 < len(p) and p[j+1] == '*':\n                ans = (dp(i, j + 2) or\n                       first_match and dp(i + 1, j))\n            else:\n                ans = first_match and dp(i + 1, j + 1)\n        \n        memo[(i, j)] = ans\n        return ans\n    \n    return dp(0, 0)",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    }
  ]
}