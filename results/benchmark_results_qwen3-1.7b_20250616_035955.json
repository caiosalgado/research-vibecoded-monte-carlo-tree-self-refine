{
  "timestamp": "2025-06-16T04:09:37.788261",
  "model": "ollama:qwen3:1.7b",
  "total_problems": 9,
  "benchmark_results": [
    {
      "problem_id": "isPalindrome",
      "problem_title": "Palindrome Number",
      "runs": [
        {
          "run_number": 1,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 2,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    reversed_num = 0\n    temp = x\n    while temp > 0:\n        reversed_num = reversed_num * 10 + temp % 10\n        temp = temp // 10\n    return x == reversed_num",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.3333333333333333,
        "avg_full_accuracy": 0.3333333333333333,
        "total_errors": 2,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "romanToInt",
      "problem_title": "Roman to Integer",
      "runs": [
        {
          "run_number": 1,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def romanToInt(s: str) -> int:\n    roman_values = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    total = 0\n    for i in range(len(s)):\n        current = s[i]\n        if i < len(s) - 1:\n            next_char = s[i+1]\n            if roman_values[current] < roman_values[next_char]:\n                total -= roman_values[current]\n            else:\n                total += roman_values[current]\n        else:\n            total += roman_values[current]\n    return total",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.3333333333333333,
        "avg_full_accuracy": 0.3333333333333333,
        "total_errors": 2,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "twoSum",
      "problem_title": "Two Sum",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_to_index = {}\n    for index, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], index]\n        num_to_index[num] = index\n    return []  # This line is theoretically unreachable as per problem constraints",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_to_index = {}\n    for index, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], index]\n        num_to_index[num] = index",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    num_to_index = {}\n    for index, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], index]\n        num_to_index[num] = index",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "addTwoNumbers",
      "problem_title": "Add Two Numbers",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:\n    carry = 0\n    dummy = ListNode(0)\n    current = dummy\n    while l1 or l2:\n        digit1 = l1.val if l1 else 0\n        digit2 = l2.val if l2 else 0\n        total = digit1 + digit2 + carry\n        carry = total // 10\n        new_digit = total % 10\n        current.next = ListNode(new_digit)\n        current = current.next\n        if l1:\n            l1 = l1.next\n        if l2:\n            l2 = l2.next\n    while carry > 0:\n        current.next = ListNode(carry % 10)\n        current = current.next\n        carry = carry // 10\n    return dummy.next",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.3333333333333333,
        "avg_full_accuracy": 0.3333333333333333,
        "total_errors": 2,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "longestPalindrome",
      "problem_title": "Longest Palindromic Substring",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    start = 0\n    end = 0\n    for i in range(n):\n        # Odd length palindromes\n        l, r = i, i\n        while l >= 0 and r < n and s[l] == s[r]:\n            if r - l + 1 > end - start + 1:\n                start = l\n                end = r\n            l -= 1\n            r += 1\n        # Even length palindromes\n        l, r = i, i + 1\n        while l >= 0 and r < n and s[l] == s[r]:\n            if r - l + 1 > end - start + 1:\n                start = l\n                end = r\n            l -= 1\n            r += 1\n    return s[start:end+1]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if not s:\n        return \"\"\n    n = len(s)\n    max_len = 1\n    start = 0\n    for i in range(n):\n        # Odd length\n        l, r = i, i\n        while l >= 0 and r < n and s[l] == s[r]:\n            current_len = r - l + 1\n            if current_len > max_len:\n                max_len = current_len\n                start = l\n                end = r\n            l -= 1\n            r += 1\n        # Even length\n        l, r = i, i + 1\n        while l >= 0 and r < n and s[l] == s[r]:\n            current_len = r - l + 1\n            if current_len > max_len:\n                max_len = current_len\n                start = l\n                end = r\n            l -= 1\n            r += 1\n    return s[start:end+1]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "def longestPalindrome(s: str) -> str:\n    if not s:\n        return \"\"\n    n = len(s)\n    max_len = 1\n    start = 0\n    for i in range(n):\n        # Odd length palindromes\n        left, right = i, i\n        while left >= 0 and right < n and s[left] == s[right]:\n            current_len = right - left + 1\n            if current_len > max_len:\n                max_len = current_len\n                start = left\n                end = right\n            left -= 1\n            right += 1\n        # Even length palindromes\n        left, right = i, i + 1\n        while left >= 0 and right < n and s[left] == s[right]:\n            current_len = right - left + 1\n            if current_len > max_len:\n                max_len = current_len\n                start = left\n                end = right\n            left -= 1\n            right += 1\n    return s[start:end+1]",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 1.0,
        "avg_full_accuracy": 1.0,
        "total_errors": 0,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "maxArea",
      "problem_title": "Container With Most Water",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left = 0\n    right = len(height) - 1\n    max_area = 0\n    while left < right:\n        current_area = (right - left) * min(height[left], height[right])\n        if current_area > max_area:\n            max_area = current_area\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "heights = [1, 8, 6, 2, 5, 4, 8, 3, 7]",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "success",
          "code": "from typing import List\n\ndef maxArea(height: List[int]) -> int:\n    left = 0\n    right = len(height) - 1\n    max_area = 0\n    while left < right:\n        current_area = (right - left) * min(height[left], height[right])\n        if current_area > max_area:\n            max_area = current_area\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area",
          "partial_accuracy": 1.0,
          "full_accuracy": 1.0,
          "error_count": 0
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.6666666666666666,
        "avg_full_accuracy": 0.6666666666666666,
        "total_errors": 1,
        "consistency_score": 0.0
      }
    },
    {
      "problem_id": "mergeKLists",
      "problem_title": "Merge k Sorted Lists",
      "runs": [
        {
          "run_number": 1,
          "status": "success",
          "code": "import heapq\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    if not lists:\n        return None\n    heap = []\n    for lst in lists:\n        if lst:\n            heapq.heappush(heap, (lst.val, lst))\n    result = None\n    while heap:\n        val, current = heapq.heappop(heap)\n        if result is None:\n            result = current\n        else:\n            result.next = current\n        if current.next:\n            heapq.heappush(heap, (current.next.val, current.next))\n    return result",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 2,
          "status": "success",
          "code": "import heapq\n\ndef mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    if not lists:\n        return None\n    heap = []\n    for node in lists:\n        if node:\n            heapq.heappush(heap, (node.val, node))\n    dummy = ListNode(0)\n    current = dummy\n    while heap:\n        val, node = heapq.heappop(heap)\n        current.next = node\n        current = current.next\n        if node.next:\n            heapq.heappush(heap, (node.next.val, node.next))\n    return dummy.next",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 3
        },
        {
          "run_number": 3,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.0,
        "total_errors": 7,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "findMedianSortedArrays",
      "problem_title": "Median of Two Sorted Arrays",
      "runs": [
        {
          "run_number": 1,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 2,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.0,
        "total_errors": 3,
        "consistency_score": 1.0
      }
    },
    {
      "problem_id": "isMatch",
      "problem_title": "Regular Expression Matching",
      "runs": [
        {
          "run_number": 1,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 2,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        },
        {
          "run_number": 3,
          "status": "no_code",
          "code": "",
          "partial_accuracy": 0.0,
          "full_accuracy": 0.0,
          "error_count": 1
        }
      ],
      "summary": {
        "avg_partial_accuracy": 0.0,
        "avg_full_accuracy": 0.0,
        "total_errors": 3,
        "consistency_score": 1.0
      }
    }
  ]
}