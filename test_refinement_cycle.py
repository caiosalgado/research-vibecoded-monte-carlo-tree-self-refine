#!/usr/bin/env python3
"""
Test script for the refinement cycle implementation
"""

from src.client import AISuiteClient
from src.mcts import MCTS
from src.constants import DEFAULT_MODEL

def test_refinement_cycle(debug=True):
    """Test the refinement cycle with max_iter=1"""
    print("üß™ Testing Refinement Cycle Implementation")
    print("="*50)
    
    # Initialize LLM client
    llm = AISuiteClient(model=DEFAULT_MODEL)
    
    # Initialize MCTS with max_iter=1 for one refinement iteration and debug mode
    mcts = MCTS(llm=llm, max_iter=1, debug=debug)
    
    # Run on twoSum problem
    problem_id = "twoSum"
    
    print(f"üéØ Running MCTS on problem: {problem_id}")
    print(f"üìä Max iterations: {mcts.max_iter}")
    print(f"üêõ Debug mode: {'ENABLED' if debug else 'DISABLED'}")
    print()
    
    # Run the MCTS process
    mcts.fit(problem_id)
    
    # Print final tree summary
    print("\nüå≥ Final Tree Summary:")
    mcts.print_tree_summary()
    
    # Print detailed node information
    print("\nüìä Detailed Node Information:")
    for node_name in mcts.get_nodes():
        node_info = mcts.get_node_info(node_name)
        print(f"\n{node_name}:")
        for key, value in node_info.items():
            print(f"  {key}: {value}")
    
    # Note: Comprehensive debug summary is now automatically generated by MCTS
    if debug:
        print("\n" + "="*80)
        print("üéâ COMPREHENSIVE DEBUG MODE COMPLETED!")
        print("   ‚Ä¢ All prompts and responses logged with clear formatting")
        print("   ‚Ä¢ Code extraction verified at each step")
        print("   ‚Ä¢ Reward parsing detailed with multiple attempts")
        print("   ‚Ä¢ UCT calculations shown with full breakdown")
        print("   ‚Ä¢ Summary table generated with key metrics")
        print("   ‚Ä¢ Success/failure confirmations throughout")
        print("="*80)
    
    print("\n‚úÖ Test completed!")

def test_refinement_cycle_minimal():
    """Test without debug mode for cleaner output"""
    test_refinement_cycle(debug=False)

if __name__ == "__main__":
    # Run with debug mode by default
    test_refinement_cycle(debug=True)
    
    # Uncomment to run without debug mode
    # test_refinement_cycle_minimal() 